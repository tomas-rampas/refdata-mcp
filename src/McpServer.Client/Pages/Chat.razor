@page "/chat"
@using McpServer.Client.Services
@using McpServer.Application.DTOs
@inject IApiClient ApiClient
@inject IJSRuntime JSRuntime

<PageTitle>Reference Data Chat</PageTitle>

<div class="container-fluid h-100">
    <div class="row h-100">
        <div class="col-12">
            <h3 class="mb-3">Banking Reference Data Assistant</h3>
            
            <div class="chat-container">
                <div class="messages-container" @ref="messagesContainer">
                    @if (!messages.Any())
                    {
                        <div class="text-center text-muted p-5">
                            <i class="fas fa-comments fa-3x mb-3"></i>
                            <p>Ask questions about policies, procedures, or reference data.</p>
                            <p class="small">Example: "What is the process for updating customer reference data?"</p>
                        </div>
                    }
                    else
                    {
                        @foreach (var message in messages)
                        {
                            <div class="message @(message.IsUser ? "user-message" : "assistant-message")">
                                <div class="message-header">
                                    <i class="fas @(message.IsUser ? "fa-user" : "fa-robot") me-2"></i>
                                    <span class="fw-bold">@(message.IsUser ? "You" : "Assistant")</span>
                                    <span class="text-muted small ms-2">@message.Timestamp.ToString("HH:mm")</span>
                                </div>
                                <div class="message-content">
                                    @message.Content
                                </div>
                                @if (!message.IsUser && message.Sources != null && message.Sources.Any())
                                {
                                    <div class="message-sources">
                                        <small class="text-muted">
                                            <i class="fas fa-info-circle me-1"></i>
                                            Sources: @string.Join(", ", message.Sources)
                                        </small>
                                    </div>
                                }
                            </div>
                        }
                    }
                    
                    @if (isLoading)
                    {
                        <div class="message assistant-message">
                            <div class="message-header">
                                <i class="fas fa-robot me-2"></i>
                                <span class="fw-bold">Assistant</span>
                            </div>
                            <div class="message-content">
                                <div class="typing-indicator">
                                    <span></span>
                                    <span></span>
                                    <span></span>
                                </div>
                            </div>
                        </div>
                    }
                </div>

                <div class="input-container">
                    <form @onsubmit="SendMessage" @onsubmit:preventDefault="true">
                        <div class="input-group">
                            <input type="text" class="form-control" placeholder="Type your question here..." 
                                   @bind="currentMessage" @bind:event="oninput" disabled="@isLoading" />
                            <button class="btn btn-primary" type="submit" disabled="@(isLoading || string.IsNullOrWhiteSpace(currentMessage))">
                                <i class="fas fa-paper-plane"></i> Send
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<ChatMessage> messages = new();
    private string currentMessage = string.Empty;
    private bool isLoading = false;
    private ElementReference messagesContainer;

    private class ChatMessage
    {
        public string Content { get; set; } = string.Empty;
        public bool IsUser { get; set; }
        public DateTime Timestamp { get; set; }
        public List<string>? Sources { get; set; }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(currentMessage) || isLoading)
            return;

        // Add user message
        messages.Add(new ChatMessage
        {
            Content = currentMessage,
            IsUser = true,
            Timestamp = DateTime.Now
        });

        var query = currentMessage;
        currentMessage = string.Empty;
        isLoading = true;
        StateHasChanged();

        try
        {
            // Call API
            var response = await ApiClient.SendChatQueryAsync(new ChatRequestDto { Query = query });

            // Add assistant response
            messages.Add(new ChatMessage
            {
                Content = response.Response,
                IsUser = false,
                Timestamp = DateTime.Now,
                Sources = response.Sources?.Select(s => s.Title).ToList()
            });
        }
        catch (Exception ex)
        {
            // Add error message
            messages.Add(new ChatMessage
            {
                Content = $"Sorry, I encountered an error: {ex.Message}",
                IsUser = false,
                Timestamp = DateTime.Now
            });
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
            
            // Scroll to bottom
            await JSRuntime.InvokeVoidAsync("scrollToBottom", messagesContainer);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initializeChat");
        }
    }
}

<style>
    .chat-container {
        height: calc(100vh - 200px);
        display: flex;
        flex-direction: column;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        background-color: #f8f9fa;
    }

    .messages-container {
        flex: 1;
        overflow-y: auto;
        padding: 20px;
        background-color: white;
    }

    .message {
        margin-bottom: 20px;
        padding: 15px;
        border-radius: 8px;
        max-width: 70%;
    }

    .user-message {
        background-color: #007bff;
        color: white;
        margin-left: auto;
        text-align: right;
    }

    .assistant-message {
        background-color: #f1f3f4;
        color: #202124;
        margin-right: auto;
    }

    .message-header {
        margin-bottom: 8px;
        font-size: 0.9rem;
    }

    .message-content {
        white-space: pre-wrap;
        word-wrap: break-word;
    }

    .message-sources {
        margin-top: 8px;
        padding-top: 8px;
        border-top: 1px solid #dee2e6;
    }

    .input-container {
        padding: 20px;
        border-top: 1px solid #dee2e6;
        background-color: #f8f9fa;
    }

    .typing-indicator {
        display: inline-flex;
        align-items: center;
    }

    .typing-indicator span {
        height: 8px;
        width: 8px;
        background-color: #202124;
        border-radius: 50%;
        display: inline-block;
        margin: 0 2px;
        opacity: 0.4;
        animation: typing 1.4s infinite;
    }

    .typing-indicator span:nth-child(2) {
        animation-delay: 0.2s;
    }

    .typing-indicator span:nth-child(3) {
        animation-delay: 0.4s;
    }

    @@keyframes typing {
        0%, 60%, 100% {
            opacity: 0.4;
        }
        30% {
            opacity: 1;
        }
    }
</style>