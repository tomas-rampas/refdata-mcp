@page "/ingestion"
@using McpServer.Client.Services
@using McpServer.Application.DTOs
@inject IApiClient ApiClient
@inject IJSRuntime JSRuntime
@implements IDisposable

<PageTitle>Data Ingestion</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h3 class="mb-4">Reference Data Ingestion</h3>
            
            <div class="row">
                <div class="col-lg-6">
                    <div class="card mb-4">
                        <div class="card-header">
                            <h5 class="mb-0">
                                <i class="fas fa-upload me-2"></i>Start Ingestion
                            </h5>
                        </div>
                        <div class="card-body">
                            <p class="text-muted">
                                Start the ingestion process to load and index documents from configured sources:
                            </p>
                            <ul class="list-unstyled">
                                <li><i class="fas fa-folder me-2"></i>Local file system</li>
                                <li><i class="fab fa-jira me-2"></i>Jira issues and documentation</li>
                                <li><i class="fab fa-confluence me-2"></i>Confluence spaces</li>
                            </ul>
                            
                            <button class="btn btn-primary btn-lg w-100" @onclick="StartIngestion" disabled="@(isIngesting || isLoading)">
                                @if (isIngesting)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                    <span>Ingestion in Progress...</span>
                                }
                                else
                                {
                                    <i class="fas fa-play me-2"></i>
                                    <span>Start Ingestion</span>
                                }
                            </button>
                            
                            @if (!string.IsNullOrEmpty(errorMessage))
                            {
                                <div class="alert alert-danger mt-3 mb-0" role="alert">
                                    <i class="fas fa-exclamation-circle me-2"></i>
                                    @errorMessage
                                </div>
                            }
                            
                            @if (!string.IsNullOrEmpty(successMessage))
                            {
                                <div class="alert alert-success mt-3 mb-0" role="alert">
                                    <i class="fas fa-check-circle me-2"></i>
                                    @successMessage
                                </div>
                            }
                        </div>
                    </div>
                </div>
                
                <div class="col-lg-6">
                    <div class="card mb-4">
                        <div class="card-header">
                            <h5 class="mb-0">
                                <i class="fas fa-info-circle me-2"></i>Current Status
                            </h5>
                        </div>
                        <div class="card-body">
                            @if (currentStatus != null)
                            {
                                <div class="mb-3">
                                    <label class="form-label fw-bold">Job ID:</label>
                                    <p class="text-muted mb-2">@currentStatus.JobId</p>
                                </div>
                                
                                <div class="mb-3">
                                    <label class="form-label fw-bold">Status:</label>
                                    <p class="mb-2">
                                        <span class="badge @GetStatusBadgeClass(currentStatus.Status)">
                                            @currentStatus.Status
                                        </span>
                                    </p>
                                </div>
                                
                                <div class="mb-3">
                                    <label class="form-label fw-bold">Documents Processed:</label>
                                    <p class="text-muted mb-2">@currentStatus.DocumentsProcessed</p>
                                </div>
                                
                                <div class="mb-3">
                                    <label class="form-label fw-bold">Started:</label>
                                    <p class="text-muted mb-2">@currentStatus.StartedAt.ToString("yyyy-MM-dd HH:mm:ss")</p>
                                </div>
                                
                                @if (currentStatus.CompletedAt.HasValue)
                                {
                                    <div class="mb-3">
                                        <label class="form-label fw-bold">Completed:</label>
                                        <p class="text-muted mb-2">@currentStatus.CompletedAt?.ToString("yyyy-MM-dd HH:mm:ss")</p>
                                    </div>
                                    
                                    <div class="mb-3">
                                        <label class="form-label fw-bold">Duration:</label>
                                        <p class="text-muted mb-2">@GetDuration(currentStatus.StartedAt, currentStatus.CompletedAt ?? DateTime.Now)</p>
                                    </div>
                                }
                                
                                @if (!string.IsNullOrEmpty(currentStatus.ErrorMessage))
                                {
                                    <div class="alert alert-danger" role="alert">
                                        <i class="fas fa-exclamation-triangle me-2"></i>
                                        <strong>Error:</strong> @currentStatus.ErrorMessage
                                    </div>
                                }
                            }
                            else
                            {
                                <p class="text-muted text-center py-3">
                                    <i class="fas fa-info-circle me-2"></i>
                                    No active ingestion job
                                </p>
                            }
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-history me-2"></i>Recent Ingestion Jobs
                    </h5>
                </div>
                <div class="card-body">
                    @if (recentJobs.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>Job ID</th>
                                        <th>Status</th>
                                        <th>Started</th>
                                        <th>Completed</th>
                                        <th>Documents</th>
                                        <th>Duration</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var job in recentJobs)
                                    {
                                        <tr>
                                            <td><small>@job.JobId</small></td>
                                            <td>
                                                <span class="badge @GetStatusBadgeClass(job.Status)">
                                                    @job.Status
                                                </span>
                                            </td>
                                            <td>@job.StartedAt.ToString("MM/dd HH:mm")</td>
                                            <td>@(job.CompletedAt?.ToString("MM/dd HH:mm") ?? "-")</td>
                                            <td>@job.DocumentsProcessed</td>
                                            <td>@GetDuration(job.StartedAt, job.CompletedAt ?? DateTime.Now)</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <p class="text-muted text-center py-3">
                            <i class="fas fa-inbox me-2"></i>
                            No ingestion history available
                        </p>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private IngestionStatusDto? currentStatus;
    private List<IngestionStatusDto> recentJobs = new();
    private bool isIngesting = false;
    private bool isLoading = false;
    private string? errorMessage;
    private string? successMessage;
    private System.Threading.Timer? statusTimer;

    protected override async Task OnInitializedAsync()
    {
        await LoadStatus();
        StartStatusPolling();
    }

    private async Task StartIngestion()
    {
        isLoading = true;
        errorMessage = null;
        successMessage = null;
        StateHasChanged();

        try
        {
            var jobId = await ApiClient.StartIngestionAsync();
            successMessage = $"Ingestion job started successfully. Job ID: {jobId}";
            isIngesting = true;
            
            // Immediately check status
            await LoadStatus();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to start ingestion: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadStatus()
    {
        try
        {
            var status = await ApiClient.GetIngestionStatusAsync();
            currentStatus = status;
            
            // Update ingesting state
            isIngesting = status != null && 
                         (status.Status == "InProgress" || status.Status == "Pending");
            
            // Load recent jobs (mock for now - would come from API)
            if (status != null && status.Status == "Completed")
            {
                if (!recentJobs.Any(j => j.JobId == status.JobId))
                {
                    recentJobs.Insert(0, status);
                    if (recentJobs.Count > 10)
                    {
                        recentJobs = recentJobs.Take(10).ToList();
                    }
                }
            }
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading status: {ex.Message}");
        }
    }

    private void StartStatusPolling()
    {
        statusTimer = new System.Threading.Timer(async _ =>
        {
            if (isIngesting)
            {
                await InvokeAsync(async () => await LoadStatus());
            }
        }, null, TimeSpan.Zero, TimeSpan.FromSeconds(2));
    }

    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Completed" => "bg-success",
            "InProgress" => "bg-primary",
            "Pending" => "bg-warning",
            "Failed" => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private string GetDuration(DateTime start, DateTime end)
    {
        if (start == DateTime.MinValue || end == DateTime.MinValue)
            return "-";
        
        var duration = end - start;
        if (duration.TotalMinutes < 1)
            return $"{duration.Seconds}s";
        else if (duration.TotalHours < 1)
            return $"{duration.Minutes}m {duration.Seconds}s";
        else
            return $"{duration.Hours}h {duration.Minutes}m";
    }

    public void Dispose()
    {
        statusTimer?.Dispose();
    }
}